# Makefile for benchmarking code
# For ks_dynamical

#------------------------------------------------------------
# Instructions ...

# 1. Edit the CODETYPE macro in Make_${ARCH} file in the top level
#    directory to include the compiler macros 
#      -DCGTIME
#    for conjugate gradient.
# 2. Edit the file ../Make_time_template to select or create the
#    appropriate ARCH and LAUNCH for your platform -- see instructions there.
# 3. Edit the in.time.${PROJ} file to select the desired lattice size
# 4. In this directory, run

#    make -f Make_time time

#    Results are in the files out.time.${PROJS}
# 5. Compare results with benchmarks given by 
#    http://www.physics.indiana.edu/~sg/milc/benchmark.html
#    Note that the test probably includes a warmup part and a timing part.
# 6. You are welcome to contribute to the above site.
#------------------------------------------------------------

# For running benchmarks

PROJS = \
  su3_rmd

include ../Make_time_template

######################################################################
# An assortment of results ...
# For detailed benchmarks, please see 
#   http://www.physics.indiana.edu/~sg/milc/benchmarks.html
#

######################################################################
# SUN SPARC Ultra 30 Make_vanilla
#   gcc -O3 -DINLINE (libraries and application)
#      8^4 lattice
#      CGTIME mflops = 67
#

######################################################################
# SUN Sunfire Solaris 8 C compiler Make_vanilla
#   cc -O5  -fast -dalign -libmil -fsimple=2 -fns -DFAST (libraries)
#   cc -O5  -fast -dalign -libmil -fsimple=2 -fns -DINLINE (application)
#      8^4 lattice
#      CGTIME mflops = 348
#
#

######################################################################
# Compaq Alphaserver Cluster (lemieux) 1:4 nodes
# Compilation A:
#  cc -O -float -arch=ev68 -DFAST (libraries)
#  cc -O -float -arch=ev68 -DINLINE  (application)
# Compilation B:
#  cc -O4  -fast -float -ev68 -DFAST (libraries)
	#  cc -O4  -fast -float -ev68 -DINLINE (application)
#
#      8^4 lattice
#
#                      MF sec
#                       A   B
#      CGTIME          520 525
#

######################################################################
# 2 GHz AMD / Myrinet 2:4 nodes
# Compilation A: Make_vanilla libraries
#  gcc -O  -fexpensive-optimizations   -fpeephole   -fstrength-reduce  -march=i586 (libraries) -DFAST
#  gcc -O  -fexpensive-optimizations -funroll-loops -fpeephole -fstrength-reduce -fschedule-insns2 -march=i586 -DINLINE -DSSE -DSSE_INLINE  (application)
# Compilation B: Make_SSE_nasm libraries
#  gcc -O  -fexpensive-optimizations   -fpeephole   -fstrength-reduce  -march=i586 (libraries) -DFAST
#  gcc -O  -fexpensive-optimizations -funroll-loops -fpeephole -fstrength-reduce -fschedule-insns2 -march=i586 -DINLINE (application)
#  
#
#      8^4 lattice
#
#                      MF sec
#                       A   B
#      CGTIME         164 128
#

######################################################################
# 1.6 GHz UMich AMD / Myrinet 4:4 nodes
# Compilation A: Make_vanilla libraries
#  pgcc -O3 -DFAST -tp athlonxp -Munroll=c:4,n:4 -fast -Minline=levels:10 (libraries)
#  pgcc -O3 -DFAST -tp athlonxp -Munroll=c:4,n:4 -fast -Minline=levels:10 -DINLINE (application)
#  pgcc -O3 -DFAST -tp athlonxp -Munroll=c:4,n:4 -fast -Minline=levels:10 (libraries)
#  pgcc -O3 -DINLINE -tp athlonxp -Munroll=c:4,n:4 -fast -Minline=levels:10 -DINLINE (application)
# Compilation B: (with prefetching OFF)
#  gcc -O -DFAST -fexpensive-optimizations -funroll-loops -fpeephole -fstrength-reduce -fschedule-insns2 -march=athlon
#  gcc -O -DINLINE -DP4 -DSSE -DSSE_INLINE -fexpensive-optimizations -funroll-loops -fpeephole -fstrength-reduce -fschedule-insns2 -march=athlon
# Compilation C: (with prefetching ON)
#  gcc -O -DFAST -fexpensive-optimizations -funroll-loops -fpeephole -fstrength-reduce -fschedule-insns2 -march=athlon
#  gcc -O -DINLINE -DP4 -DSSE -DSSE_INLINE -fexpensive-optimizations -funroll-loops -fpeephole -fstrength-reduce -fschedule-insns2 -march=athlon
#
#      8^4 lattice
#
#                      MF sec
#                       A   B  C
#      CGTIME          188 182
#

######################################################################
# ORNL eagle (375 MHz Power3) 1:4 nodes
# Compilation A: 
#  config.h NATIVEDOUBLE
#  xlc -O3 -Q=500 -qmaxmem=-1 -DFAST (Make_RS6K libraries)
#  mpcc(xlc) -O3  -qarch=pwr3 -qtune=pwr3 -Q=500 -qmaxmem=-1 -bmaxdata:0x40000000 -bmaxstack:0x8000000 -DINLINE  (application)
# Compilation B: 
#  xlc -O3 -Q=500 -qarch=pwr3 -qtune=pwr3 -qmaxmem=-1 -DFAST (Make_RS6K libraries)
#  mpcc(xlc) -O3  -qarch=pwr3 -qtune=pwr3 -Q=500 -qmaxmem=-1 -bmaxdata:0x40000000 -bmaxstack:0x8000000 -DINLINE  (application)
#
#  
#
#      8^4 lattice
#
#                      MF sec
#                       A   B
#      CGTIME          234 235
#

